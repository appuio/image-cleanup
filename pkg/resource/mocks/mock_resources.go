// Code generated by MockGen. DO NOT EDIT.
// Source: resource_test.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/kubernetes/typed/core/v1"
	reflect "reflect"
)

// MockMockCoreClient is a mock of MockCoreClient interface
type MockMockCoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockMockCoreClientMockRecorder
}

// MockMockCoreClientMockRecorder is the mock recorder for MockMockCoreClient
type MockMockCoreClientMockRecorder struct {
	mock *MockMockCoreClient
}

// NewMockMockCoreClient creates a new mock instance
func NewMockMockCoreClient(ctrl *gomock.Controller) *MockMockCoreClient {
	mock := &MockMockCoreClient{ctrl: ctrl}
	mock.recorder = &MockMockCoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMockCoreClient) EXPECT() *MockMockCoreClientMockRecorder {
	return m.recorder
}

// ComponentStatuses mocks base method
func (m *MockMockCoreClient) ComponentStatuses() v11.ComponentStatusInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentStatuses")
	ret0, _ := ret[0].(v11.ComponentStatusInterface)
	return ret0
}

// ComponentStatuses indicates an expected call of ComponentStatuses
func (mr *MockMockCoreClientMockRecorder) ComponentStatuses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentStatuses", reflect.TypeOf((*MockMockCoreClient)(nil).ComponentStatuses))
}

// ConfigMaps mocks base method
func (m *MockMockCoreClient) ConfigMaps(namespace string) v11.ConfigMapInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps", namespace)
	ret0, _ := ret[0].(v11.ConfigMapInterface)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps
func (mr *MockMockCoreClientMockRecorder) ConfigMaps(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockMockCoreClient)(nil).ConfigMaps), namespace)
}

// Endpoints mocks base method
func (m *MockMockCoreClient) Endpoints(namespace string) v11.EndpointsInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints", namespace)
	ret0, _ := ret[0].(v11.EndpointsInterface)
	return ret0
}

// Endpoints indicates an expected call of Endpoints
func (mr *MockMockCoreClientMockRecorder) Endpoints(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockMockCoreClient)(nil).Endpoints), namespace)
}

// Events mocks base method
func (m *MockMockCoreClient) Events(namespace string) v11.EventInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", namespace)
	ret0, _ := ret[0].(v11.EventInterface)
	return ret0
}

// Events indicates an expected call of Events
func (mr *MockMockCoreClientMockRecorder) Events(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockMockCoreClient)(nil).Events), namespace)
}

// LimitRanges mocks base method
func (m *MockMockCoreClient) LimitRanges(namespace string) v11.LimitRangeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitRanges", namespace)
	ret0, _ := ret[0].(v11.LimitRangeInterface)
	return ret0
}

// LimitRanges indicates an expected call of LimitRanges
func (mr *MockMockCoreClientMockRecorder) LimitRanges(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitRanges", reflect.TypeOf((*MockMockCoreClient)(nil).LimitRanges), namespace)
}

// Namespaces mocks base method
func (m *MockMockCoreClient) Namespaces() v11.NamespaceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].(v11.NamespaceInterface)
	return ret0
}

// Namespaces indicates an expected call of Namespaces
func (mr *MockMockCoreClientMockRecorder) Namespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockMockCoreClient)(nil).Namespaces))
}

// Nodes mocks base method
func (m *MockMockCoreClient) Nodes() v11.NodeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(v11.NodeInterface)
	return ret0
}

// Nodes indicates an expected call of Nodes
func (mr *MockMockCoreClientMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockMockCoreClient)(nil).Nodes))
}

// PersistentVolumes mocks base method
func (m *MockMockCoreClient) PersistentVolumes() v11.PersistentVolumeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumes")
	ret0, _ := ret[0].(v11.PersistentVolumeInterface)
	return ret0
}

// PersistentVolumes indicates an expected call of PersistentVolumes
func (mr *MockMockCoreClientMockRecorder) PersistentVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumes", reflect.TypeOf((*MockMockCoreClient)(nil).PersistentVolumes))
}

// PersistentVolumeClaims mocks base method
func (m *MockMockCoreClient) PersistentVolumeClaims(namespace string) v11.PersistentVolumeClaimInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeClaims", namespace)
	ret0, _ := ret[0].(v11.PersistentVolumeClaimInterface)
	return ret0
}

// PersistentVolumeClaims indicates an expected call of PersistentVolumeClaims
func (mr *MockMockCoreClientMockRecorder) PersistentVolumeClaims(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeClaims", reflect.TypeOf((*MockMockCoreClient)(nil).PersistentVolumeClaims), namespace)
}

// Pods mocks base method
func (m *MockMockCoreClient) Pods(namespace string) v11.PodInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", namespace)
	ret0, _ := ret[0].(v11.PodInterface)
	return ret0
}

// Pods indicates an expected call of Pods
func (mr *MockMockCoreClientMockRecorder) Pods(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockMockCoreClient)(nil).Pods), namespace)
}

// PodTemplates mocks base method
func (m *MockMockCoreClient) PodTemplates(namespace string) v11.PodTemplateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodTemplates", namespace)
	ret0, _ := ret[0].(v11.PodTemplateInterface)
	return ret0
}

// PodTemplates indicates an expected call of PodTemplates
func (mr *MockMockCoreClientMockRecorder) PodTemplates(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodTemplates", reflect.TypeOf((*MockMockCoreClient)(nil).PodTemplates), namespace)
}

// ReplicationControllers mocks base method
func (m *MockMockCoreClient) ReplicationControllers(namespace string) v11.ReplicationControllerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationControllers", namespace)
	ret0, _ := ret[0].(v11.ReplicationControllerInterface)
	return ret0
}

// ReplicationControllers indicates an expected call of ReplicationControllers
func (mr *MockMockCoreClientMockRecorder) ReplicationControllers(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationControllers", reflect.TypeOf((*MockMockCoreClient)(nil).ReplicationControllers), namespace)
}

// ResourceQuotas mocks base method
func (m *MockMockCoreClient) ResourceQuotas(namespace string) v11.ResourceQuotaInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceQuotas", namespace)
	ret0, _ := ret[0].(v11.ResourceQuotaInterface)
	return ret0
}

// ResourceQuotas indicates an expected call of ResourceQuotas
func (mr *MockMockCoreClientMockRecorder) ResourceQuotas(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceQuotas", reflect.TypeOf((*MockMockCoreClient)(nil).ResourceQuotas), namespace)
}

// Secrets mocks base method
func (m *MockMockCoreClient) Secrets(namespace string) v11.SecretInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets", namespace)
	ret0, _ := ret[0].(v11.SecretInterface)
	return ret0
}

// Secrets indicates an expected call of Secrets
func (mr *MockMockCoreClientMockRecorder) Secrets(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockMockCoreClient)(nil).Secrets), namespace)
}

// Services mocks base method
func (m *MockMockCoreClient) Services(namespace string) v11.ServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", namespace)
	ret0, _ := ret[0].(v11.ServiceInterface)
	return ret0
}

// Services indicates an expected call of Services
func (mr *MockMockCoreClientMockRecorder) Services(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockMockCoreClient)(nil).Services), namespace)
}

// ServiceAccounts mocks base method
func (m *MockMockCoreClient) ServiceAccounts(namespace string) v11.ServiceAccountInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts", namespace)
	ret0, _ := ret[0].(v11.ServiceAccountInterface)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts
func (mr *MockMockCoreClientMockRecorder) ServiceAccounts(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockMockCoreClient)(nil).ServiceAccounts), namespace)
}

// MockMockSecretInterface is a mock of MockSecretInterface interface
type MockMockSecretInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMockSecretInterfaceMockRecorder
}

// MockMockSecretInterfaceMockRecorder is the mock recorder for MockMockSecretInterface
type MockMockSecretInterfaceMockRecorder struct {
	mock *MockMockSecretInterface
}

// NewMockMockSecretInterface creates a new mock instance
func NewMockMockSecretInterface(ctrl *gomock.Controller) *MockMockSecretInterface {
	mock := &MockMockSecretInterface{ctrl: ctrl}
	mock.recorder = &MockMockSecretInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMockSecretInterface) EXPECT() *MockMockSecretInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMockSecretInterface) Create(arg0 *v1.Secret) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMockSecretInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMockSecretInterface)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockMockSecretInterface) Update(arg0 *v1.Secret) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockMockSecretInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMockSecretInterface)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockMockSecretInterface) Delete(name string, options *v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockMockSecretInterfaceMockRecorder) Delete(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMockSecretInterface)(nil).Delete), name, options)
}

// DeleteCollection mocks base method
func (m *MockMockSecretInterface) DeleteCollection(options *v10.DeleteOptions, listOptions v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", options, listOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockMockSecretInterfaceMockRecorder) DeleteCollection(options, listOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockMockSecretInterface)(nil).DeleteCollection), options, listOptions)
}

// Get mocks base method
func (m *MockMockSecretInterface) Get(name string, options v10.GetOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name, options)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockMockSecretInterfaceMockRecorder) Get(name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMockSecretInterface)(nil).Get), name, options)
}

// List mocks base method
func (m *MockMockSecretInterface) List(opts v10.ListOptions) (*v1.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v1.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockMockSecretInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMockSecretInterface)(nil).List), opts)
}

// Watch mocks base method
func (m *MockMockSecretInterface) Watch(opts v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockMockSecretInterfaceMockRecorder) Watch(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMockSecretInterface)(nil).Watch), opts)
}

// Patch mocks base method
func (m *MockMockSecretInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, pt, data}
	for _, a := range subresources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockMockSecretInterfaceMockRecorder) Patch(name, pt, data interface{}, subresources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, pt, data}, subresources...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockMockSecretInterface)(nil).Patch), varargs...)
}
